# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com

# import main modules
import vk_api as vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import json as json
import requests as requests
from random import randint as randint
import time as time
import datetime as datetime
# import other modules
from configurationFile import BotConfig as BotConfig
from workWithUsersDatabase import UserSearcher
from workWithExcelFile import ExcelSearcher as ExcelSearcher
from specialScripts import CompilationNews as CompilationNews

# full error log output(without auto-reconnection)
error_checking_switch = False
# time to restart the bot
reboot_time = 5


# MAIN BOT LOGIC
def bot_processing():
    # vk connect
    vk = vk_api.VkApi(token=f"{BotConfig.BotToken}")
    vk._auth_token()
    vk.get_api()
    # connection information
    print("-----------------------------")
    print("Bot launched into the network")
    print("-----------------------------")

    # get buttons for the VK keyboard
    def get_button(label, color, payload=""):
        return {
            "action": {
                "type": "text",
                "payload": json.dumps(payload),
                "label": label
            },
            "color": color
        }

    # keyboards settings
    main_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–ù–æ–≤–æ—Å—Ç–∏", color="positive"),
             get_button(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", color="positive")],
            [get_button(label="–ü–æ–º–æ—â—å", color="primary"),
             get_button(label="–û –±–æ—Ç–µ", color="primary")],
        ]
    }

    before_registration_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", color="positive")],
            [get_button(label="–ü–æ–º–æ—â—å", color="primary"),
             get_button(label="–ó–≤–æ–Ω–∫–∏", color="primary"),
             get_button(label="–û –±–æ—Ç–µ", color="primary")],
        ]
    }

    schedules_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–ó–≤–æ–Ω–∫–æ–≤", color="positive"),
             get_button(label="–£—Ä–æ–∫–æ–≤", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    choosing_day_of_week_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", color="positive"),
             get_button(label="–í—Ç–æ—Ä–Ω–∏–∫", color="positive"),
             get_button(label="–°—Ä–µ–¥–∞", color="positive")],
            [get_button(label="–ß–µ—Ç–≤–µ—Ä–≥", color="positive"),
             get_button(label="–ü—è—Ç–Ω–∏—Ü–∞", color="positive"),
             get_button(label="–°—É–±–±–æ—Ç–∞", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    # json for keyboard
    main_keyboard = json.dumps(main_keyboard, ensure_ascii=False).encode("utf-8")
    main_keyboard = str(main_keyboard.decode("utf-8"))
    before_registration_keyboard = json.dumps(before_registration_keyboard, ensure_ascii=False).encode("utf-8")
    before_registration_keyboard = str(before_registration_keyboard.decode("utf-8"))
    schedules_keyboard = json.dumps(schedules_keyboard, ensure_ascii=False).encode("utf-8")
    schedules_keyboard = str(schedules_keyboard.decode("utf-8"))
    choosing_day_of_week_keyboard = json.dumps(choosing_day_of_week_keyboard, ensure_ascii=False).encode("utf-8")
    choosing_day_of_week_keyboard = str(choosing_day_of_week_keyboard.decode("utf-8"))

    # sending messages
    def write_msg(user_id, message, keyboard=None, sticker_id=None, attachment=None):
        # sending data to the terminal
        print("Responce:", "".join(message))
        if sticker_id != None:
            print(f"Sticker: {sticker_id}")
        if attachment != None:
            print(f"Attachment: {attachment}")
        # keyboard if the person is not registered yet
        if keyboard == main_keyboard:
            UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                    user_id=f"id{user_id}")
            if UserSearcher.presence_user == []:
                keyboard = before_registration_keyboard
        # send the message
        vk.method("messages.send",
                  {"peer_id": user_id, "message": message, "keyboard": keyboard, "sticker_id": sticker_id,
                   "attachment": attachment, "random_id": randint(1, 100000000)})

    # sending a database from a conversation to reserve data
    def sending_and_reserving_database(conversation_id, database_source, message):
        # sending data to the terminal
        print(f"Sending and reserving a database...({conversation_id}, {database_source})")
        # sending and reserving data
        get_serverAccess = vk.method("docs.getMessagesUploadServer", {"type": "doc", "peer_id": conversation_id})
        get_serverLink = requests.post(get_serverAccess["upload_url"],
                                       files={"file": open(database_source, "rb")}).json()
        save_docFile = vk.method("docs.save", {"file": get_serverLink["file"]})["doc"]
        attachment = "doc{}_{}".format(save_docFile["owner_id"], save_docFile["id"])
        vk.method("messages.send",
                  {"peer_id": BotConfig.ConversationForDataReservationID, "message": message, "attachment": attachment,
                   "random_id": randint(1, 10000000)})

    # getting attachments for photos
    def update_attachment_id(img_source):
        get_serverAccess = vk.method("photos.getMessagesUploadServer",
                                     {"album_id": 268631098, "group_id": BotConfig.CommunityID})
        get_serverLink = requests.post(get_serverAccess["upload_url"],
                                       files={"file": open(f"botAttachments/{img_source}", "rb")}).json()
        save_attachmentFile = vk.method("photos.saveMessagesPhoto",
                                        {"photo": get_serverLink["photo"], "server": get_serverLink["server"],
                                         "hash": get_serverLink["hash"]})[0]
        return f"photo{save_attachmentFile['owner_id']}_{save_attachmentFile['id']}"

    # longpoll
    longpoll = VkBotLongPoll(vk, group_id=BotConfig.CommunityID)
    # response logic
    for event in longpoll.listen():
        # processing a new message
        if (event.type == VkBotEventType.MESSAGE_NEW) and (event.object.peer_id == event.object.from_id):
            # sending data to the terminal
            print(datetime.datetime.today())
            print(f"Message from-->https://vk.com/id{event.object.peer_id}")
            print(f"Message content: {event.object.text}")
            # if the request is from in private messages
            if event.object.peer_id == event.object.from_id:
                # if the back buttons are pressed
                if event.object.text.lower() in BotConfig.buttons_back:
                    # greetings and jump to main menu
                    if event.object.text.lower().lower() in BotConfig.ru_greetings_bot:
                        response_randomizer = randint(0, len(BotConfig.ru_greetings_bot) - 1)
                        response_word = BotConfig.ru_greetings_bot[response_randomizer]
                        get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"{response_word.title()}, {str(get_user_name)}!")
                    elif event.object.text.lower().lower() in BotConfig.eng_greetings_bot:
                        response_randomizer = randint(0, len(BotConfig.eng_greetings_bot) - 1)
                        response_word = BotConfig.eng_greetings_bot[response_randomizer]
                        get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"{response_word.title()}, {str(get_user_name)}!")
                    # only jump to main menu
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard, message="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüëå")
                # main keyboard
                elif event.object.text.lower() == "–Ω–æ–≤–æ—Å—Ç–∏":
                    vk.method("messages.setActivity", {"peer_id": event.object.peer_id, "type": "typing"})
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message=CompilationNews.weather_searcher(source=BotConfig.weather_source,
                                                                       search_tag=BotConfig.weather_search_tag,
                                                                       tag_info=BotConfig.weather_tag_info,
                                                                       headers=BotConfig.user_agent))
                    write_msg(event.object.peer_id, CompilationNews.rates_searcher(), keyboard=main_keyboard)
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message="üî•–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n–¶–∏—Ç–∞—Ç—ã - @buildmesomerockets\n–ú–µ–º—ã - @pumpodslushano\nü§°–ö–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –º–µ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –≥–∞–ª–æ—á–∫–∏:\n–ú–µ–º—ã - @predmemetika")
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message=CompilationNews.news_searcher(source=BotConfig.news_source,
                                                                    search_tag=BotConfig.news_search_tag,
                                                                    tag_info=BotConfig.news_tag_info,
                                                                    headers=BotConfig.user_agent))
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message=CompilationNews.covid_searcher(source=BotConfig.covid_source,
                                                                     search_tag=BotConfig.covid_search_tag,
                                                                     tag_info=BotConfig.covid_tag_info,
                                                                     headers=BotConfig.user_agent))
                elif event.object.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                    write_msg(user_id=event.object.peer_id, keyboard=schedules_keyboard,
                              message="–û–∫, —Ç–æ–ª—å–∫–æ –≤—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µüññ")
                elif event.object.text.lower() == "–ø–æ–º–æ—â—å":
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message="–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? - –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, –≤–µ–¥—å —Ç—ã –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤ –±–µ—Å–µ–¥–µ, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—ÉüéØ\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=")
                elif event.object.text.lower() == "–æ –±–æ—Ç–µ":
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard, message=BotConfig.about_bot[0])
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard, message=BotConfig.about_bot[1])
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard, message=BotConfig.about_bot[2],
                              attachment=update_attachment_id(img_source="AboutBot.png"))
                # schedules keyboard
                elif event.object.text.lower() in ["–∑–≤–æ–Ω–∫–æ–≤", "–∑–≤–æ–Ω–∫–∏"]:
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message=BotConfig.unified_schedule_calls)
                elif event.object.text.lower() == "—É—Ä–æ–∫–æ–≤":
                    write_msg(user_id=event.object.peer_id, keyboard=choosing_day_of_week_keyboard,
                              message="–•–º–º, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—åüòº\n–ö—Å—Ç–∞, –≤ —Ü–µ–ª—è—Ö –∑–∞—â–∏—Ç—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –Ω–∞–¥–µ–≤–∞—Ç—å –º–∞—Å–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏üò∑")
                # choosing day of week keyboard
                elif event.object.text.lower() == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé")
                        vk.method("messages.setActivity", {"peer_id": event.object.peer_id, "type": "typing"})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", end_data="None")
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"\n{ExcelSearcher.output_day_schedule}")
                elif event.object.text.lower() == "–≤—Ç–æ—Ä–Ω–∏–∫":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé")
                        vk.method("messages.setActivity", {"peer_id": event.object.peer_id, "type": "typing"})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–í—Ç–æ—Ä–Ω–∏–∫", end_data="None")
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"\n{ExcelSearcher.output_day_schedule}")
                elif event.object.text.lower() == "—Å—Ä–µ–¥–∞":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé")
                        vk.method("messages.setActivity", {"peer_id": event.object.peer_id, "type": "typing"})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–°—Ä–µ–¥–∞", end_data="None")
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"\n{ExcelSearcher.output_day_schedule}")
                elif event.object.text.lower() == "—á–µ—Ç–≤–µ—Ä–≥":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé")
                        vk.method("messages.setActivity", {"peer_id": event.object.peer_id, "type": "typing"})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ß–µ—Ç–≤–µ—Ä–≥", end_data="None")
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"\n{ExcelSearcher.output_day_schedule}")
                elif event.object.text.lower() == "–ø—è—Ç–Ω–∏—Ü–∞":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé")
                        vk.method("messages.setActivity", {"peer_id": event.object.peer_id, "type": "typing"})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ü—è—Ç–Ω–∏—Ü–∞", end_data="None")
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"\n{ExcelSearcher.output_day_schedule}")
                elif event.object.text.lower() == "—Å—É–±–±–æ—Ç–∞":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message="–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé")
                        vk.method("messages.setActivity", {"peer_id": event.object.peer_id, "type": "typing"})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–°—É–±–±–æ—Ç–∞", end_data="None")
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"\n{ExcelSearcher.output_day_schedule}")
                # registration - instruction
                elif event.object.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"–¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–æ–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø—Ä—è–º–æ —Ç—É—Ç - –¥–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ - –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑)üòú\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø –≤ –ü—Ä–µ–¥—É–Ω–∏–≤–µ—Ä—Å–∞—Ä–∏–∏ –ú–ê–ò:\n8Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(BotConfig.EightClassGroups)}\n9Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(BotConfig.NineClassGroups)}\n1Ô∏è‚É£0Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(BotConfig.TenClassGroups)}\n1Ô∏è‚É£1Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(BotConfig.ElevenClassGroups)}\n–ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É:\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –µ—Å–ª–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, —Ç–æ —Ç—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –ï—Å–ª–∏ –∂–µ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—ã —Å–º–µ–Ω–∏–ª –≥—Ä—É–ø–ø—É, —Ç–æ –ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É‚öô\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=")
                # registration - the process of entering users in the database
                elif (event.object.text.upper() in BotConfig.EightClassGroups) or (
                        event.object.text.upper() in BotConfig.NineClassGroups) or (
                        event.object.text.upper() in BotConfig.TenClassGroups) or (
                        event.object.text.upper() in BotConfig.ElevenClassGroups) or (
                        event.object.text.upper() in ["–ì–û–°–¢–¨", "–¢–ï–°–¢", "GUEST", "TEST"]) or (
                        event.object.text.upper() in BotConfig.TeachersCodifiers):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        get_last_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["last_name"]
                        get_first_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        if event.object.text.upper() in BotConfig.EightClassGroups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="8class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E', 'F'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"#JOIN –ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 8class | {event.object.text.upper()})üöÄ")
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
                        elif event.object.text.upper() in BotConfig.NineClassGroups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="9class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E', 'F'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"#JOIN –ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 9class | {event.object.text.upper()})üöÄ")
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
                        elif event.object.text.upper() in BotConfig.TenClassGroups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="10class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E', 'F'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"#JOIN –ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 10class | {event.object.text.upper()})üöÄ")
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
                        elif event.object.text.upper() in BotConfig.ElevenClassGroups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="11class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E', 'F'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"#JOIN –ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 11class | {event.object.text.upper()})üöÄ")
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
                        elif event.object.text.upper() in ["–ì–û–°–¢–¨", "–¢–ï–°–¢", "GUEST", "TEST"]:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="GUESTS", sheet_name="–ì–û–°–¢–¨",
                                columns_for_user=['A', 'B', 'D', 'E', 'F'], extra_cells=0)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"#JOIN –ö—Ç–æ-—Ç–æ –∑–∞—Ö–æ—Ç–µ–ª –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ - {get_last_name} {get_first_name}(id{event.object.peer_id} | GUESTS | –ì–û–°–¢–¨)üî≠")
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞üé≥")
                        elif event.object.text in BotConfig.TeachersCodifiers:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="TEACHERS", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E', 'F'], extra_cells=0)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"#JOIN –ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–µ–¥–∞–≥–æ–≥ - {get_last_name} {get_first_name}(id{event.object.peer_id} | TEACHERS | {event.object.text.upper()})üéì")
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ")
                    else:
                        if event.object.text.upper() == UserSearcher.presence_user[3]:
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message="–î–∞-–¥–∞, –≤—Å—ë –≤–Ω–µ—Å–µ–Ω–æ –≤–µ—Ä–Ω–æ - —Ç—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—Éüóø\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=")
                        else:
                            write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                      message=f"–û–≥–æ - –ø–æ—Ö–æ–∂–µ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É! –ù–∞–ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É, —á—Ç–æ–±—ã –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ‚úç\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=")
                # get your data from the database
                elif event.object.text.lower() in ["—è", "–∫—Ç–æ —è", "—Ö—Ç–æ —è", "–º–æ–∏ –¥–∞–Ω–Ω—ã–µ"]:
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user != []:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"–í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–Ω—ë—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {UserSearcher.presence_user[0]} | {UserSearcher.presence_user[1]} | {UserSearcher.presence_user[2]} | {UserSearcher.presence_user[3]}üíæ")
                    else:
                        write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                                  message=f"–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –±–æ—Ç –ø–æ–∫–∞ –∑–Ω–∞–µ—Ç –ø—Ä–æ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ —ç—Ç–æ: id{event.object.peer_id}üì°")
                # 3301 - easter egg
                elif event.object.text.lower() == "–ø–∞—Å—Ö–∞–ª–∫–∞":
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message="–ü–∞—Å—Ö–∞–ª–∫–∞?! –í–∞—É, –≤ –±–æ—Ç–µ –µ—Å—Ç—å –ø–∞—Å—Ö–∞–ª–∫–∞! –ü—Ä–∏—Å—Ç—É–ø–∏–º, –µ—Å—Ç—å —à–∏—Ñ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–∏–∫—á–µ –Ω–∏–∂–µ - —Ä–∞—Å—à–∏—Ñ—Ä—É–π –µ–≥–æ –∏ –æ—Ç–ø–∏—à–∏—Å—å –≤ –æ–±—â—É—é –±–µ—Å–µ–¥—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞(–ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –¥–∞—ë–º –¥–≤–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: ascii, tenet)",
                              attachment=update_attachment_id(img_source="EasterEgg.png"))
                # check for updates
                elif event.object.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è":
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message="–û–æ–æ—É –¥–∞ - –∞ –≤–æ—Ç –∏ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ú—ã —Å–ª–∞–≤–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±–µ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—èüòé")
                # unrecognized command
                else:
                    write_msg(user_id=event.object.peer_id, keyboard=main_keyboard,
                              message="–ü–æ-–º–æ–µ–º—É —Ç—ã –≤–≤–æ–¥–∏—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòï")
                # sending data to the terminal
                print("-----------------------------")


# starting the bot logic
if __name__ == "__main__":
    if error_checking_switch != True:
        # for a permanent bot job with auto-reconnection
        while True:
            try:
                bot_processing()
            except Exception as E:
                # sending data to the terminal
                print("-----------------------------")
                print(datetime.datetime.today())
                print("!!!  The bot is disabled  !!!")
                print(f"Reason: {E}")
                print("-----------------------------")
                time.sleep(reboot_time)
                print("!!!    Reconnect, wait    !!!")
    else:
        # starting with the log output of the error
        bot_processing()

# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com
