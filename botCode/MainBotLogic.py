# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/@id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com

# import main modules
import vk_api as vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import json as json
from random import randint as randint
# import other modules
from configurationFile import BotConfig as BotConfig
from workWithExcelFile import ExcelSearcher as ExcelSearcher

# system arrays
groups_id_array = ["187254286"]
users_id_array = []
# excel source variable
excel_source = ""
# information about developers
about_developers = [
    "–î–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ —Ñ–∞–Ω—É –∑–∞–ø–∏–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–∏–∫–∏ –∏–∑ –ü–£–ú–∞. –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —à–∫–æ–ª—ã, –∞ –Ω–µ —Ç—É–ø–æ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ë–æ—Ç –ø—Ä–æ–¥—É–º–∞–Ω, –Ω–æ –Ω–µ –∏–¥–µ–∞–ª–µ–Ω, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤ –ª–∏—á–∫—É —Å–æ–∑–¥–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –±–æ—Ç. –¢–∞–∫–∂–µ —Ö–æ—á–µ—Ç—Å—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å discord —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ —á—å–µ-—Ç–æ –∏–¥–µ–∏: https://discord.gg/EmJKG5xüòä"]
# array for keyboard
buttons_back = ["–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∫—É–∫—É", "–∫—É", "—Å–∞–ª–∞–º", "—Å–∞–ª–∞–º–∞–ª–µ–π–∫—É–º", "–∑–¥–∞—Ä–æ–≤–∞", "–¥—ã–¥–æ–≤–∞", "–Ω–∞—á–∞—Ç—å",
                "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–º–µ–Ω—é", "–ø–ª–∏—Ç–∫–∏", "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–Ω–∞–∑–∞–¥", "hello", "hey", "hi", "qq", "q", "start",
                "main menu", "menu", "tiles", "keyboard", "back"]
# auxiliary arrays
ru_greetings_bot = ["–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∫—É", "—Å–∞–ª–∞–º", "–∑–¥–∞—Ä–æ–≤–∞", "–¥—ã–¥–æ–≤–∞"]
eng_greetings_bot = ["hello", "hey", "hi", "qq", "q"]
# schedule calls
eight_nine_schedule_calls = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n1. 9:00 - 9:45\n2. 9:50 - 10:35\n3. 10:55 - 11:40\n4. 11:50 - 12:35\n5. 12:45 - 13:30\n6. 13:50 - 14:35\n7. 14:45 - 15:30\n8. 15:40 - 16:25\n9. 16:30 - 17:15\n10. 17:20 - 18:05"
ten_eleven_schedule_calls = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n1. 9:00 - 9:45\n2. 9:50 - 10:35\n3. 10:45 - 11:30\n4. 11:50 - 12:35\n5. 12:45 - 13:30\n6. 13:40 - 14:25\n7. 14:45 - 15:30\n8. 15:40 - 16:25\n9. 16:30 - 17:15\n10. 17:20 - 18:05"


# major fuctions
def get_button(label, color, payload=""):
    return {
        "action": {
            "type": "text",
            "payload": json.dumps(payload),
            "label": label
        },
        "color": color
    }


def write_msg(id, message, keyboard=None, sticker_id=None):
    vk.method("messages.send", {"peer_id": id, "sticker_id": sticker_id, "message": message, "keyboard": keyboard,
                                "random_id": randint(1, 100000000)})


def writeinconv(id, message, sticker_id=None):
    vk.method("messages.send", {"peer_id": id, "sticker_id": sticker_id, "message": message, "sticker_id": sticker_id,
                                "random_id": randint(1, 100000000)})


# keyboards settings
main_keyboard = {
    "one_time": False,
    "buttons": [
        [get_button(label="–£—á–µ–±–Ω–∏–∫–∏", color="positive"),
         get_button(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", color="positive")],
        [get_button(label="–û –±–æ—Ç–µ", color="primary")],
    ]
}

schedules_keyboard = {
    "one_time": False,
    "buttons": [
        [get_button(label="–ó–≤–æ–Ω–∫–æ–≤", color="positive"),
         get_button(label="–£—Ä–æ–∫–æ–≤", color="positive")],
        [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
    ]
}

select_call_class_keyboard = {
    "one_time": False,
    "buttons": [
        [get_button(label="8-9", color="positive"),
         get_button(label="10-11", color="positive")],
        [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
    ]
}

select_class_keyboard = {
    "one_time": False,
    "buttons": [
        [get_button(label="10-1", color="positive"),
         get_button(label="10-2", color="positive"),
         get_button(label="10-3", color="positive")],
        [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
    ]
}

choosing_day_of_week_keyboard = {
    "one_time": False,
    "buttons": [
        [get_button(label="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", color="positive"),
         get_button(label="–í—Ç–æ—Ä–Ω–∏–∫", color="secondary"),
         get_button(label="–°—Ä–µ–¥–∞", color="positive")],
        [get_button(label="–ß–µ—Ç–≤–µ—Ä–≥", color="positive"),
         get_button(label="–ü—è—Ç–Ω–∏—Ü–∞", color="positive"),
         get_button(label="–°—É–±–±–æ—Ç–∞", color="positive")],
        [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
    ]
}

# vk connect
vk = vk_api.VkApi(token=f"{BotConfig.BotToken}")
vk._auth_token()
vk.get_api()

# longpoll
longpoll = VkBotLongPoll(vk, group_id=groups_id_array)

# json
main_keyboard = json.dumps(main_keyboard, ensure_ascii=False).encode("utf-8")
main_keyboard = str(main_keyboard.decode("utf-8"))
schedules_keyboard = json.dumps(schedules_keyboard, ensure_ascii=False).encode("utf-8")
schedules_keyboard = str(schedules_keyboard.decode("utf-8"))
select_call_class_keyboard = json.dumps(select_call_class_keyboard, ensure_ascii=False).encode("utf-8")
select_call_class_keyboard = str(select_call_class_keyboard.decode("utf-8"))
select_class_keyboard = json.dumps(select_class_keyboard, ensure_ascii=False).encode("utf-8")
select_class_keyboard = str(select_class_keyboard.decode("utf-8"))
choosing_day_of_week_keyboard = json.dumps(choosing_day_of_week_keyboard, ensure_ascii=False).encode("utf-8")
choosing_day_of_week_keyboard = str(choosing_day_of_week_keyboard.decode("utf-8"))

# connection information
print("-----------------------------")
print("Bot launched into the network")
print("-----------------------------")
# response logic
for event in longpoll.listen():
    # processing a new message
    if event.type == VkBotEventType.MESSAGE_NEW:
        # if the request is from in private messages
        if event.object.peer_id == event.object.from_id:
            # if this user is not already in the database
            if event.object.peer_id not in users_id_array:
                users_id_array.append(event.object.peer_id)
            # if the back buttons are pressed
            if event.object.text.lower() in buttons_back:
                # greetings and jump to main menu
                if event.object.text.lower().lower() in ru_greetings_bot:
                    response_randomizer = randint(0, len(ru_greetings_bot) - 1)
                    response_word = ru_greetings_bot[response_randomizer]
                    get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                    write_msg(event.object.peer_id, f"{response_word.title()}, {str(get_user_name)}!",
                              keyboard=main_keyboard)
                elif event.object.text.lower().lower() in eng_greetings_bot:
                    response_randomizer = randint(0, len(eng_greetings_bot) - 1)
                    response_word = eng_greetings_bot[response_randomizer]
                    get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                    write_msg(event.object.peer_id, f"{response_word.title()}, {str(get_user_name)}!",
                              keyboard=main_keyboard)
                # only jump to main menu
                else:
                    write_msg(event.object.peer_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüëå", keyboard=main_keyboard)
            # main keyboard
            elif event.object.text.lower() == "—É—á–µ–±–Ω–∏–∫–∏":
                write_msg(event.object.peer_id,
                          "–û–π, —Å–æ—Ä—è–Ω, –∑–∞–±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å - —Ç.–∫. –±–æ—Ç –Ω–∞ –±—ç—Ç–∫–µ, –Ω–∞–º –Ω—É–∂–Ω—ã –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∫–∞–Ω—ã —É—á–µ–±–Ω–∏–∫–æ–≤ —Å 8 –ø–æ 11 –∫–ª–∞—Å—Å—ã, –º—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞–±–∏—Ä–∞–µ–º –±–∞–∑—É, –Ω–æ –µ—â—ë –Ω—É–∂–Ω–æ –≤—Ä–µ–º—èüòè",
                          keyboard=main_keyboard)
            elif event.object.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                write_msg(event.object.peer_id, "–û–∫, —Ç–æ–ª—å–∫–æ –≤—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µüññ", keyboard=schedules_keyboard)
            elif event.object.text.lower() == "–æ –±–æ—Ç–µ":
                write_msg(event.object.peer_id, about_developers, keyboard=main_keyboard)
            # schedules keyboard
            elif event.object.text.lower() == "–∑–≤–æ–Ω–∫–æ–≤":
                write_msg(event.object.peer_id, "–¢–∞–∫—Å, –∏ –µ—â—ë –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Åü§î", keyboard=select_call_class_keyboard)
            elif event.object.text.lower() == "—É—Ä–æ–∫–æ–≤":
                write_msg(event.object.peer_id, "–¢–∞–∫—Å, –∏ –µ—â—ë –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Åü§î", keyboard=select_class_keyboard)
            # select call class keyboard
            elif event.object.text.lower() == "8-9":
                write_msg(event.object.peer_id, eight_nine_schedule_calls, keyboard=main_keyboard)
            elif event.object.text.lower() == "10-11":
                write_msg(event.object.peer_id, ten_eleven_schedule_calls, keyboard=main_keyboard)
            # select class keyboard
            elif event.object.text.lower() == "10-1":
                excel_source = "excelDatabase/10class/10_1class.xlsx"
                write_msg(event.object.peer_id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏üóì",
                          keyboard=choosing_day_of_week_keyboard)
            elif event.object.text.lower() == "10-2":
                excel_source = "excelDatabase/10class/10_2class.xlsx"
                write_msg(event.object.peer_id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏üóì",
                          keyboard=choosing_day_of_week_keyboard)
            elif event.object.text.lower() == "10-3":
                excel_source = "excelDatabase/10class/10_3class.xlsx"
                write_msg(event.object.peer_id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏üóì",
                          keyboard=choosing_day_of_week_keyboard)
            # choosing day of week keyboard
            elif event.object.text.lower() == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
                ExcelSearcher.selective_data_search(excel_source=excel_source, columns=["A", "B"], start_data="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                                                    end_data="None")
                write_msg(event.object.peer_id, ExcelSearcher.output_day_schedule, keyboard=main_keyboard)
            elif event.object.text.lower() == "–≤—Ç–æ—Ä–Ω–∏–∫":
                write_msg(event.object.peer_id, "–ö—Ö–º, —É 10 –∫–ª–∞—Å—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫, –ø–æ—ç—Ç–æ–º—É —Å–º–æ—Ç—Ä–∏ —Å–∞–ºüï∂",
                          keyboard=main_keyboard)
            elif event.object.text.lower() == "—Å—Ä–µ–¥–∞":
                ExcelSearcher.selective_data_search(excel_source=excel_source, columns=["A", "B"], start_data="–°—Ä–µ–¥–∞",
                                                    end_data="None")
                write_msg(event.object.peer_id, ExcelSearcher.output_day_schedule, keyboard=main_keyboard)
            elif event.object.text.lower() == "—á–µ—Ç–≤–µ—Ä–≥":
                ExcelSearcher.selective_data_search(excel_source=excel_source, columns=["A", "B"], start_data="–ß–µ—Ç–≤–µ—Ä–≥",
                                                    end_data="None")
                write_msg(event.object.peer_id, ExcelSearcher.output_day_schedule, keyboard=main_keyboard)
            elif event.object.text.lower() == "–ø—è—Ç–Ω–∏—Ü–∞":
                ExcelSearcher.selective_data_search(excel_source=excel_source, columns=["A", "B"], start_data="–ü—è—Ç–Ω–∏—Ü–∞",
                                                    end_data="None")
                write_msg(event.object.peer_id, ExcelSearcher.output_day_schedule, keyboard=main_keyboard)
            elif event.object.text.lower() == "—Å—É–±–±–æ—Ç–∞":
                ExcelSearcher.selective_data_search(excel_source=excel_source, columns=["A", "B"], start_data="–°—É–±–±–æ—Ç–∞",
                                                    end_data="None")
                write_msg(event.object.peer_id, ExcelSearcher.output_day_schedule, keyboard=main_keyboard)
            else:
                write_msg(event.object.peer_id, "–≠—Ç–æ —Ç–æ—á–Ω–æ –∫–æ–º–∞–Ω–¥–∞:/", keyboard=main_keyboard)

# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/@id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com
