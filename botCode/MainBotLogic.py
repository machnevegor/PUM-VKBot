# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com

# import main modules
import vk_api as vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import json as json
import requests as requests
from random import randint as randint
import time as time
import datetime as datetime
# import other modules
from configurationFile import BotConfig as BotConfig
from workWithUsersDatabase import UserSearcher
from workWithExcelFile import ExcelSearcher as ExcelSearcher

# full error log output(without auto-reconnection)
error_checking_switch = False
# time to restart the bot
reboot_time = 5

# system array
community_id = ["187254286"]
# talk to the reservation database
conversation_for_data_reservation_id = 2000000004

# all groups for all classes of the Mai pre-University
eight_class_groups = ["–ú-8-1-1, –§-8-1", "–ú-8-1-2, –§-8-1", "–ú-8-1-2, –§-8-2", "–ú-8-2-1, –§-8-1", "–ú-8-2-1, –§-8-2",
                      "–ú-8-2-2, –§-8-2"]
nine_class_groups = ["–ú-9-1, –§-9-1, –†-9-1-2", "–ú-9-1, –§-9-1, –†-9-2-1", "–ú-9-1, –§-9-1, –†-9-3-1", "–ú-9-1, –§-9-1, –†-9-3-2",
                     "–ú-9-1, –§-9-2, –†-9-1-1", "–ú-9-1, –§-9-2, –†-9-1-2", "–ú-9-1, –§-9-2, –†-9-2-1", "–ú-9-1, –§-9-2, –†-9-2-2",
                     "–ú-9-1, –§-9-2, –†-9-3-1", "–ú-9-1, –§-9-2, –†-9-3-2", "–ú-9-2, –§-9-1, –†-9-1-2", "–ú-9-2, –§-9-1, –†-9-2-1",
                     "–ú-9-2, –§-9-1, –†-9-3-1", "–ú-9-2, –§-9-1, –†-9-3-2", "–ú-9-2, –§-9-2, –†-9-1-1", "–ú-9-2, –§-9-2, –†-9-1-2",
                     "–ú-9-2, –§-9-2, –†-9-2-2", "–ú-9-2, –§-9-2, –†-9-3-1", "–ú-9-2, –§-9-2, –†-9-3-2", "–ú-9-3, –§-9-3, –†-9-1-1",
                     "–ú-9-3, –§-9-3, –†-9-1-2", "–ú-9-3, –§-9-3, –†-9-2-1", "–ú-9-3, –§-9-3, –†-9-2-2", "–ú-9-3, –§-9-3, –†-9-3-2"]
ten_class_groups = ["–ú-10-1, –ê-10-1", "–ú-10-1, –ê-10-2", "–ú-10-1, –ê-10-3", "–ú-10-2, –ê-10-1", "–ú-10-2, –ê-10-2",
                    "–ú-10-2, –ê-10-3", "–ú-10-3, –ê-10-1", "–ú-10-3, –ê-10-2", "–ú-10-3, –ê-10-3"]
eleven_class_groups = ["–ú1, –§1, –ú-1-1, –†-1-4, –õ3", "–ú1, –§1, –ú-1-1, –†-1-4, –õ4", "–ú1, –§1, –ú-1-1, –†-3, –õ-3",
                       "–ú1, –§1, –ú-2-1, –†1, –õ3", "–ú1, –§1, –ú-3-1, –†1, –õ3", "–ú1, –§1, –ú-3-1, –†-2, –õ3",
                       "–ú1, –§1, –ú-3-1, –†-3, –õ3", "–ú1, –§4, –ú-2-1, –†1, –õ3", "–ú1, –§4, –ú-3-1, –†1, –õ3",
                       "–ú2, –§2, –ú-2-1, –†1, –õ2", "–ú2, –§2, –ú-2-1, –†-3, –õ2", "–ú2, –§2, –ú-2-1, –†-3, –õ3",
                       "–ú2, –§2, –ú-2-1, –†4, –õ4", "–ú2, –§2, –ú-3-1, –†1, –õ1", "–ú2, –§2, –ú-3-1, –†1, –õ2",
                       "–ú2, –§2, –ú-3-1, –†2, –õ2", "–ú2, –§2, –ú-3-1, –†4, –õ4", "–ú3, –§1, –ú-1-1, –†4, –õ4",
                       "–ú3, –§1, –ú-2-1, –†-1, –õ3", "–ú3, –§1, –ú-2-1, –†3, –õ2", "–ú3, –§1, –ú-2-1, –†3, –õ3",
                       "–ú3, –§1, –ú-2-1, –†4, –õ4", "–ú3, –§1, –ú-3-1, –†1, –õ2", "–ú3, –§1, –ú-3-1, –†2, –õ1",
                       "–ú3, –§1, –ú-3-1, –†4, –õ4", "–ú3, –§4, –ú-1-1, –†1, –õ1", "–ú3, –§4, –ú-1-1, –†4, –õ4",
                       "–ú3, –§4, –ú-2-1, –†1, –õ1", "–ú3, –§4, –ú-2-1, –†3, –õ2", "–ú3, –§4, –ú-2-1, –†4, –õ4",
                       "–ú3, –§4, –ú-3-1, –†1, –õ2", "–ú3, –§4, –ú-3-1, –†3, –õ2", "–ú3, –§4, –ú-3-1, –†4, –õ4",
                       "–ú4, –§1, –ú-4-1, –†1, –õ1", "–ú4, –§1, –ú-4-1, –†2, –õ1", "–ú4, –§1, –ú-4-1, –†4, –õ4",
                       "–ú4, –§1, –ú-4-2, –†2, –õ1", "–ú4, –§1, –ú-4-2, –†4, –õ4", "–ú4, –§4, –ú-4-1, –†1, –õ1",
                       "–ú4, –§4, –ú-4-1, –†2, –õ1", "–ú4, –§4, –ú-4-1, –†3, –õ1", "–ú4, –§4, –ú-4-1, –†3, –õ1",
                       "–ú4, –§4, –ú-4-1, –†4, –õ4", "–ú4, –§4, –ú-4-2, –†1, –õ1", "–ú4, –§4, –ú-4-2, –†2, –õ1",
                       "–ú4, –§4, –ú-4-2, –†2, –õ3", "–ú4, –§4, –ú-4-2, –†4, –õ4"]

# array for the back button and welcome words
buttons_back = ["–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∫—É–∫—É", "–∫—É", "—Å–∞–ª–∞–º", "—Å–∞–ª–∞–º–∞–ª–µ–π–∫—É–º", "–∑–¥–∞—Ä–æ–≤–∞", "–¥—ã–¥–æ–≤–∞", "–Ω–∞—á–∞—Ç—å",
                "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–º–µ–Ω—é", "–ø–ª–∏—Ç–∫–∏", "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–Ω–∞–∑–∞–¥", "hello", "hey", "hi", "qq", "q", "start",
                "main menu", "menu", "tiles", "keyboard", "back"]
ru_greetings_bot = ["–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∫—É", "—Å–∞–ª–∞–º", "–∑–¥–∞—Ä–æ–≤–∞", "–¥—ã–¥–æ–≤–∞"]
eng_greetings_bot = ["hello", "hey", "hi", "qq", "q"]

# information about developers
about_bot = [
    "–î–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ —Ñ–∞–Ω—É –∑–∞–ø–∏–ª–∏–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–∏–∫–∏ –∏–∑ –ü–£–ú–∞. –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —à–∫–æ–ª—ã, –∞ –Ω–µ —Ç—É–ø–æ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ë–æ—Ç –ø—Ä–æ–¥—É–º–∞–Ω, –Ω–æ –Ω–µ –∏–¥–µ–∞–ª–µ–Ω, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –±–æ—Ç–∞. –¢–∞–∫–∂–µ —Ö–æ—á–µ—Ç—Å—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å discord —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ —á—å–µ–π-—Ç–æ –∏–¥–µ–∏:\nhttps://smtechnology.infoüòä",
    "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—Å—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ —Å—Ç–µ–Ω–µ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –ø–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—åüòâ"]
# schedule calls
eight_nine_schedule_calls = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n1. 9:00 - 9:45\n2. 9:50 - 10:35\n3. 10:55 - 11:40\n4. 11:50 - 12:35\n5. 12:45 - 13:30\n6. 13:50 - 14:35\n7. 14:45 - 15:30\n8. 15:40 - 16:25\n9. 16:30 - 17:15\n10. 17:20 - 18:05"
ten_eleven_schedule_calls = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n1. 9:00 - 9:45\n2. 9:50 - 10:35\n3. 10:45 - 11:30\n4. 11:50 - 12:35\n5. 12:45 - 13:30\n6. 13:40 - 14:25\n7. 14:45 - 15:30\n8. 15:40 - 16:25\n9. 16:30 - 17:15\n10. 17:20 - 18:05"


# algorithm for processing user requests
def bot_processing():
    # vk connect
    vk = vk_api.VkApi(token=f"{BotConfig.BotToken}")
    vk._auth_token()
    vk.get_api()
    # connection information
    print("-----------------------------")
    print("Bot launched into the network")
    print("-----------------------------")

    # get buttons for the VK keyboard
    def get_button(label, color, payload=""):
        return {
            "action": {
                "type": "text",
                "payload": json.dumps(payload),
                "label": label
            },
            "color": color
        }

    # keyboards settings
    main_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–£—á–µ–±–Ω–∏–∫–∏", color="positive"),
             get_button(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", color="positive")],
            [get_button(label="–ü–æ–º–æ—â—å", color="primary"),
             get_button(label="–û –±–æ—Ç–µ", color="primary")],
        ]
    }

    before_registration_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", color="positive")],
            [get_button(label="–ü–æ–º–æ—â—å", color="primary"),
             get_button(label="–û –±–æ—Ç–µ", color="primary")],
        ]
    }

    schedules_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–ó–≤–æ–Ω–∫–æ–≤", color="positive"),
             get_button(label="–£—Ä–æ–∫–æ–≤", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    select_call_class_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="8-9", color="positive"),
             get_button(label="10-11", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    choosing_day_of_week_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", color="positive"),
             get_button(label="–í—Ç–æ—Ä–Ω–∏–∫", color="positive"),
             get_button(label="–°—Ä–µ–¥–∞", color="positive")],
            [get_button(label="–ß–µ—Ç–≤–µ—Ä–≥", color="positive"),
             get_button(label="–ü—è—Ç–Ω–∏—Ü–∞", color="positive"),
             get_button(label="–°—É–±–±–æ—Ç–∞", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    # json for keyboard
    main_keyboard = json.dumps(main_keyboard, ensure_ascii=False).encode("utf-8")
    main_keyboard = str(main_keyboard.decode("utf-8"))
    before_registration_keyboard = json.dumps(before_registration_keyboard, ensure_ascii=False).encode("utf-8")
    before_registration_keyboard = str(before_registration_keyboard.decode("utf-8"))
    schedules_keyboard = json.dumps(schedules_keyboard, ensure_ascii=False).encode("utf-8")
    schedules_keyboard = str(schedules_keyboard.decode("utf-8"))
    select_call_class_keyboard = json.dumps(select_call_class_keyboard, ensure_ascii=False).encode("utf-8")
    select_call_class_keyboard = str(select_call_class_keyboard.decode("utf-8"))
    choosing_day_of_week_keyboard = json.dumps(choosing_day_of_week_keyboard, ensure_ascii=False).encode("utf-8")
    choosing_day_of_week_keyboard = str(choosing_day_of_week_keyboard.decode("utf-8"))

    # sending messages
    def write_msg(user_id, message, keyboard=None, sticker_id=None, attachment=None):
        # sending data to the terminal
        print("Responce:", "".join(message))
        if sticker_id != None:
            print(f"Sticker: {sticker_id}")
        if attachment != None:
            print(f"Attachment: {attachment}")
        # keyboard if the person is not registered yet
        if keyboard == main_keyboard:
            UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                    user_id=f"id{user_id}")
            if UserSearcher.presence_user == []:
                keyboard = before_registration_keyboard
        # send the message
        vk.method("messages.send",
                  {"peer_id": user_id, "message": message, "keyboard": keyboard, "sticker_id": sticker_id,
                   "attachment": attachment, "random_id": randint(1, 100000000)})

    # sending a database from a conversation to reserve data
    def sending_and_reserving_database(conversation_id, database_source, message):
        # sending data to the terminal
        print(f"Sending and reserving a database...({conversation_id}, {database_source})")
        # sending and reserving data
        get_serverAccess = vk.method("docs.getMessagesUploadServer", {"type": "doc", "peer_id": conversation_id})
        get_serverLink = requests.post(get_serverAccess["upload_url"],
                                       files={"file": open(database_source, "rb")}).json()
        save_docFile = vk.method("docs.save", {"file": get_serverLink["file"]})["doc"]
        attachment = "doc{}_{}".format(save_docFile["owner_id"], save_docFile["id"])
        vk.method("messages.send",
                  {"peer_id": conversation_for_data_reservation_id, "message": message, "attachment": attachment,
                   "random_id": randint(1, 10000000)})

    # longpoll
    longpoll = VkBotLongPoll(vk, group_id=community_id)
    # response logic
    for event in longpoll.listen():
        # processing a new message
        if (event.type == VkBotEventType.MESSAGE_NEW) and (event.object.peer_id == event.object.from_id):
            # sending data to the terminal
            print(datetime.datetime.today())
            print(f"Message from-->https://vk.com/id{event.object.peer_id}")
            print(f"Message content: {event.object.text}")
            # if the request is from in private messages
            if event.object.peer_id == event.object.from_id:
                # if the back buttons are pressed
                if event.object.text.lower() in buttons_back:
                    # greetings and jump to main menu
                    if event.object.text.lower().lower() in ru_greetings_bot:
                        response_randomizer = randint(0, len(ru_greetings_bot) - 1)
                        response_word = ru_greetings_bot[response_randomizer]
                        get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        write_msg(event.object.peer_id, f"{response_word.title()}, {str(get_user_name)}!",
                                  keyboard=main_keyboard)
                    elif event.object.text.lower().lower() in eng_greetings_bot:
                        response_randomizer = randint(0, len(eng_greetings_bot) - 1)
                        response_word = eng_greetings_bot[response_randomizer]
                        get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        write_msg(event.object.peer_id, f"{response_word.title()}, {str(get_user_name)}!",
                                  keyboard=main_keyboard)
                    # only jump to main menu
                    else:
                        write_msg(event.object.peer_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüëå", keyboard=main_keyboard)
                # main keyboard
                elif event.object.text.lower() == "—É—á–µ–±–Ω–∏–∫–∏":
                    write_msg(event.object.peer_id,
                              "–û–π, —Å–æ—Ä—è–Ω, –∑–∞–±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å - —Ç.–∫. –±–æ—Ç –Ω–∞ –±—ç—Ç–∫–µ, –Ω–∞–º –Ω—É–∂–Ω—ã –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∫–∞–Ω—ã —É—á–µ–±–Ω–∏–∫–æ–≤ —Å 8 –ø–æ 11 –∫–ª–∞—Å—Å—ã, –º—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞–±–∏—Ä–∞–µ–º –±–∞–∑—É, –Ω–æ –µ—â—ë –Ω—É–∂–Ω–æ –≤—Ä–µ–º—èüòè",
                              keyboard=main_keyboard)
                elif event.object.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                    write_msg(event.object.peer_id, "–û–∫, —Ç–æ–ª—å–∫–æ –≤—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µüññ", keyboard=schedules_keyboard)
                elif event.object.text.lower() == "–ø–æ–º–æ—â—å":
                    write_msg(event.object.peer_id,
                              "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? - –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, –≤–µ–¥—å —Ç—ã –∏—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤ –±–µ—Å–µ–¥–µ, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—ÉüéØ\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=",
                              keyboard=main_keyboard)
                elif event.object.text.lower() == "–æ –±–æ—Ç–µ":
                    write_msg(event.object.peer_id, about_bot[0], keyboard=main_keyboard)
                    write_msg(event.object.peer_id, about_bot[1], keyboard=main_keyboard,
                              attachment="photo222338543_457245836_657bc0cfbecac6a616")
                # schedules keyboard
                elif event.object.text.lower() == "–∑–≤–æ–Ω–∫–æ–≤":
                    write_msg(event.object.peer_id, "–¢–∞–∫—Å, –∏ –µ—â—ë –≤—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤ü§î",
                              keyboard=select_call_class_keyboard)
                elif event.object.text.lower() == "—É—Ä–æ–∫–æ–≤":
                    write_msg(event.object.peer_id,
                              "–•–º–º, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—åüòº\n–ö—Å—Ç–∞, –¥–µ—Ä–∂–∏ –≥—Ä–∞—Ñ–∏–∫ –∑–∞–Ω—è—Ç–∏–π –≤–æ –≤—Ä–µ–º—è –æ—á–Ω–æ-–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:",
                              keyboard=choosing_day_of_week_keyboard,
                              attachment="photo222338543_457245837_c353f13b4997d1ff78")
                # select call class keyboard
                elif event.object.text.lower() == "8-9":
                    write_msg(event.object.peer_id, eight_nine_schedule_calls, keyboard=main_keyboard)
                elif event.object.text.lower() == "10-11":
                    write_msg(event.object.peer_id, ten_eleven_schedule_calls, keyboard=main_keyboard)
                # choosing day of week keyboard
                elif event.object.text.lower() == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  "–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif event.object.text.lower() == "–≤—Ç–æ—Ä–Ω–∏–∫":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  "–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–í—Ç–æ—Ä–Ω–∏–∫", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif event.object.text.lower() == "—Å—Ä–µ–¥–∞":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  "–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–°—Ä–µ–¥–∞", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif event.object.text.lower() == "—á–µ—Ç–≤–µ—Ä–≥":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  "–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ß–µ—Ç–≤–µ—Ä–≥", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif event.object.text.lower() == "–ø—è—Ç–Ω–∏—Ü–∞":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  "–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ü—è—Ç–Ω–∏—Ü–∞", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif event.object.text.lower() == "—Å—É–±–±–æ—Ç–∞":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  "–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏ –Ω–∞ –ø–ª–∏—Ç–∫—É -–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüìñ",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–°—É–±–±–æ—Ç–∞", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                # registration - instruction
                elif event.object.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ! –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏(–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏, –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ - –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑)üòú\n–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–≤–æ–∂—É —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ —à–∫–æ–ª–µ:\n8Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(eight_class_groups)}\n9Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(nine_class_groups)}\n1Ô∏è‚É£0Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(ten_class_groups)}\n1Ô∏è‚É£1Ô∏è‚É£–ö–ª–∞—Å—Å: {'; '.join(eleven_class_groups)}\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É:\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id,
                                  f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –µ—Å–ª–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, —Ç–æ —Ç—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –ï—Å–ª–∏ –∂–µ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—ã —Å–º–µ–Ω–∏–ª –≥—Ä—É–ø–ø—É, —Ç–æ –ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É‚öô\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=",
                                  keyboard=main_keyboard)
                # registration - the process of entering users in the database
                elif (event.object.text.upper() in eight_class_groups) or (
                        event.object.text.upper() in nine_class_groups) or (
                        event.object.text.upper() in ten_class_groups) or (
                        event.object.text.upper() in eleven_class_groups):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        get_last_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["last_name"]
                        get_first_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        if event.object.text.upper() in eight_class_groups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="8class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 8class | {event.object.text.upper()})üöÄ")
                            write_msg(event.object.peer_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ",
                                      keyboard=main_keyboard)
                        elif event.object.text.upper() in nine_class_groups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="9class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 9class | {event.object.text.upper()})üöÄ")
                            write_msg(event.object.peer_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ",
                                      keyboard=main_keyboard)
                        elif event.object.text.upper() in ten_class_groups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="10class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 10class | {event.object.text.upper()})üöÄ")
                            write_msg(event.object.peer_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ",
                                      keyboard=main_keyboard)
                        elif event.object.text.upper() in eleven_class_groups:
                            UserSearcher.adding_user_in_database(
                                database_source="workWithUsersDatabase/UsersDatabase.txt",
                                full_name=f"{get_last_name} {get_first_name}", user_id=f"id{event.object.peer_id}",
                                source_for_user="11class", sheet_name=event.object.text.upper(),
                                columns_for_user=['A', 'B', 'D', 'E'], extra_cells=1)
                            sending_and_reserving_database(conversation_id=event.object.from_id,
                                                           database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                           message=f"–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {get_last_name} {get_first_name}(id{event.object.peer_id} | 11class | {event.object.text.upper()})üöÄ")
                            write_msg(event.object.peer_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ",
                                      keyboard=main_keyboard)
                    else:
                        if event.object.text.upper() == UserSearcher.presence_user[3]:
                            write_msg(event.object.peer_id,
                                      "–î–∞-–¥–∞, –≤—Å—ë –≤–Ω–µ—Å–µ–Ω–æ –≤–µ—Ä–Ω–æ - —Ç—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—Éüóø\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=",
                                      keyboard=main_keyboard)
                        else:
                            write_msg(event.object.peer_id,
                                      f"–û–≥–æ - –ø–æ—Ö–æ–∂–µ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É! –ù–∞–ø–∏—à–∏ –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É, —á—Ç–æ–±—ã –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ‚úç\nhttps://vk.me/join/FhSVyJp7fYT0fM805_KTHNWPctDNa79JGsI=",
                                      keyboard=main_keyboard)
                # get your data from the database
                elif event.object.text.lower() in ["—è", "–∫—Ç–æ —è", "—Ö—Ç–æ —è", "–º–æ–∏ –¥–∞–Ω–Ω—ã–µ"]:
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user != []:
                        write_msg(event.object.peer_id,
                                  f"–í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–Ω—ë—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {UserSearcher.presence_user[0]} | {UserSearcher.presence_user[1]} | {UserSearcher.presence_user[2]} | {UserSearcher.presence_user[3]}üíæ",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id,
                                  f"–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –±–æ—Ç –ø–æ–∫–∞ –∑–Ω–∞–µ—Ç –ø—Ä–æ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ —ç—Ç–æ: id{event.object.peer_id}üì°",
                                  keyboard=main_keyboard)
                # 3301 - easter egg
                elif event.object.text.lower() == "–ø–∞—Å—Ö–∞–ª–∫–∞":
                    write_msg(event.object.peer_id,
                              "–ü–∞—Å—Ö–∞–ª–∫–∞?! –í–∞—É, –≤ –±–æ—Ç–µ –µ—Å—Ç—å –ø–∞—Å—Ö–∞–ª–∫–∞! –ü—Ä–∏—Å—Ç—É–ø–∏–º, –µ—Å—Ç—å —à–∏—Ñ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–∏–∫—á–µ –Ω–∏–∂–µ - —Ä–∞—Å—à–∏—Ñ—Ä—É–π –µ–≥–æ –∏ –æ—Ç–ø–∏—à–∏—Å—å –≤ –æ–±—â—É—é –±–µ—Å–µ–¥—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞(–ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –¥–∞—ë–º –¥–≤–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: ascii, tenet)",
                              keyboard=main_keyboard, attachment="photo222338543_457245838_d3e257103e69dd2d75")
                # check for updates
                elif event.object.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è":
                    write_msg(event.object.peer_id,
                              "–û–æ–æ—É –¥–∞ - –∞ –≤–æ—Ç –∏ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ú—ã —Å–ª–∞–≤–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±–µ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—èüòé",
                              keyboard=main_keyboard)
                # unrecognized command
                else:
                    write_msg(event.object.peer_id, "–ü–æ-–º–æ–µ–º—É —Ç—ã –≤–≤–æ–¥–∏—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòï",
                              keyboard=main_keyboard)
                # sending data to the terminal
                print("-----------------------------")


# starting the bot logic
if __name__ == "__main__":
    if error_checking_switch != True:
        # for a permanent bot job with auto-reconnection
        while True:
            try:
                bot_processing()
            except Exception as E:
                # sending data to the terminal
                print("-----------------------------")
                print(datetime.datetime.today())
                print("!!!  The bot is disabled  !!!")
                print(f"Reason: {E}")
                print("-----------------------------")
                time.sleep(reboot_time)
                print("!!!    Reconnect, wait    !!!")
    else:
        # starting with the log output of the error
        bot_processing()

# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com
