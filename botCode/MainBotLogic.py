# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com

# import main modules
import vk_api as vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import json as json
from random import randint as randint
import time as time
import datetime as datetime
# import other modules
from configurationFile import BotConfig as BotConfig
from workWithUsersDatabase import UserSearcher
from workWithExcelFile import ExcelSearcher as ExcelSearcher

# reboot time
reboot_time = 5
# system array
groups_id_array = ["187254286"]

# information about developers
about_bot = [
    "–î–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ —Ñ–∞–Ω—É –∑–∞–ø–∏–ª–∏–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–∏–∫–∏ –∏–∑ –ü–£–ú–∞. –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —à–∫–æ–ª—ã, –∞ –Ω–µ —Ç—É–ø–æ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ë–æ—Ç –ø—Ä–æ–¥—É–º–∞–Ω, –Ω–æ –Ω–µ –∏–¥–µ–∞–ª–µ–Ω, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –±–æ—Ç–∞. –¢–∞–∫–∂–µ —Ö–æ—á–µ—Ç—Å—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å discord —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ —á—å–µ–π-—Ç–æ –∏–¥–µ–∏:\nhttps://smtechnology.infoüòä"]
# array for keyboard
buttons_back = ["–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∫—É–∫—É", "–∫—É", "—Å–∞–ª–∞–º", "—Å–∞–ª–∞–º–∞–ª–µ–π–∫—É–º", "–∑–¥–∞—Ä–æ–≤–∞", "–¥—ã–¥–æ–≤–∞", "–Ω–∞—á–∞—Ç—å",
                "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–º–µ–Ω—é", "–ø–ª–∏—Ç–∫–∏", "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–Ω–∞–∑–∞–¥", "hello", "hey", "hi", "qq", "q", "start",
                "main menu", "menu", "tiles", "keyboard", "back"]
# auxiliary arrays
ru_greetings_bot = ["–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∫—É", "—Å–∞–ª–∞–º", "–∑–¥–∞—Ä–æ–≤–∞", "–¥—ã–¥–æ–≤–∞"]
eng_greetings_bot = ["hello", "hey", "hi", "qq", "q"]
# schedule calls
eight_nine_schedule_calls = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n1. 9:00 - 9:45\n2. 9:50 - 10:35\n3. 10:55 - 11:40\n4. 11:50 - 12:35\n5. 12:45 - 13:30\n6. 13:50 - 14:35\n7. 14:45 - 15:30\n8. 15:40 - 16:25\n9. 16:30 - 17:15\n10. 17:20 - 18:05"
ten_eleven_schedule_calls = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n1. 9:00 - 9:45\n2. 9:50 - 10:35\n3. 10:45 - 11:30\n4. 11:50 - 12:35\n5. 12:45 - 13:30\n6. 13:40 - 14:25\n7. 14:45 - 15:30\n8. 15:40 - 16:25\n9. 16:30 - 17:15\n10. 17:20 - 18:05"


# algorithm for processing user requests
def bot_processing():
    # vk connect
    vk = vk_api.VkApi(token=f"{BotConfig.BotToken}")
    vk._auth_token()
    vk.get_api()
    # connection information
    print("-----------------------------")
    print("Bot launched into the network")
    print("-----------------------------")

    # get buttons for the VK keyboard
    def get_button(label, color, payload=""):
        return {
            "action": {
                "type": "text",
                "payload": json.dumps(payload),
                "label": label
            },
            "color": color
        }

    # keyboards settings
    main_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–£—á–µ–±–Ω–∏–∫–∏", color="positive"),
             get_button(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", color="positive")],
            [get_button(label="–ü–æ–ª—É—á–∏—Ç—å ID", color="primary"),
             get_button(label="–û –±–æ—Ç–µ", color="primary")],
        ]
    }

    schedules_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–ó–≤–æ–Ω–∫–æ–≤", color="positive"),
             get_button(label="–£—Ä–æ–∫–æ–≤", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    select_call_class_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="8-9", color="positive"),
             get_button(label="10-11", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    choosing_day_of_week_keyboard = {
        "one_time": False,
        "buttons": [
            [get_button(label="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", color="positive"),
             get_button(label="–í—Ç–æ—Ä–Ω–∏–∫", color="positive"),
             get_button(label="–°—Ä–µ–¥–∞", color="positive")],
            [get_button(label="–ß–µ—Ç–≤–µ—Ä–≥", color="positive"),
             get_button(label="–ü—è—Ç–Ω–∏—Ü–∞", color="positive"),
             get_button(label="–°—É–±–±–æ—Ç–∞", color="positive")],
            [get_button(label="–ù–∞–∑–∞–¥", color="secondary")],
        ]
    }

    # json for keyboard
    main_keyboard = json.dumps(main_keyboard, ensure_ascii=False).encode("utf-8")
    main_keyboard = str(main_keyboard.decode("utf-8"))
    schedules_keyboard = json.dumps(schedules_keyboard, ensure_ascii=False).encode("utf-8")
    schedules_keyboard = str(schedules_keyboard.decode("utf-8"))
    select_call_class_keyboard = json.dumps(select_call_class_keyboard, ensure_ascii=False).encode("utf-8")
    select_call_class_keyboard = str(select_call_class_keyboard.decode("utf-8"))
    choosing_day_of_week_keyboard = json.dumps(choosing_day_of_week_keyboard, ensure_ascii=False).encode("utf-8")
    choosing_day_of_week_keyboard = str(choosing_day_of_week_keyboard.decode("utf-8"))

    # sending messages
    def write_msg(id, message, keyboard=None, sticker_id=None, attachment=None):
        # sending data to the terminal
        print("Responce:", "".join(message))
        if sticker_id != None:
            print(f"Sticker: {sticker_id}")
        if attachment != None:
            print(f"Attachment: {attachment}")
        # send the message
        vk.method("messages.send", {"peer_id": id, "message": message, "keyboard": keyboard, "sticker_id": sticker_id,
                                    "attachment": attachment, "random_id": randint(1, 100000000)})

    # longpoll
    longpoll = VkBotLongPoll(vk, group_id=groups_id_array)
    # response logic
    for event in longpoll.listen():
        # processing a new message
        if event.type == VkBotEventType.MESSAGE_NEW:
            # sending data to the terminal
            print(datetime.datetime.today())
            print(f"Message from-->https://vk.com/id{event.object.peer_id}")
            print(f"Message content: {event.object.text}")
            # if the request is from in private messages
            if event.object.peer_id == event.object.from_id:
                # if the back buttons are pressed
                if event.object.text.lower() in buttons_back:
                    # greetings and jump to main menu
                    if event.object.text.lower().lower() in ru_greetings_bot:
                        response_randomizer = randint(0, len(ru_greetings_bot) - 1)
                        response_word = ru_greetings_bot[response_randomizer]
                        get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        write_msg(event.object.peer_id, f"{response_word.title()}, {str(get_user_name)}!",
                                  keyboard=main_keyboard)
                    elif event.object.text.lower().lower() in eng_greetings_bot:
                        response_randomizer = randint(0, len(eng_greetings_bot) - 1)
                        response_word = eng_greetings_bot[response_randomizer]
                        get_user_name = vk.method("users.get", {"user_ids": event.object.peer_id})[0]["first_name"]
                        write_msg(event.object.peer_id, f"{response_word.title()}, {str(get_user_name)}!",
                                  keyboard=main_keyboard)
                    # only jump to main menu
                    else:
                        write_msg(event.object.peer_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüëå", keyboard=main_keyboard)
                # main keyboard
                elif event.object.text.lower() == "—É—á–µ–±–Ω–∏–∫–∏":
                    write_msg(event.object.peer_id,
                              "–û–π, —Å–æ—Ä—è–Ω, –∑–∞–±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å - —Ç.–∫. –±–æ—Ç –Ω–∞ –±—ç—Ç–∫–µ, –Ω–∞–º –Ω—É–∂–Ω—ã –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∫–∞–Ω—ã —É—á–µ–±–Ω–∏–∫–æ–≤ —Å 8 –ø–æ 11 –∫–ª–∞—Å—Å—ã, –º—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞–±–∏—Ä–∞–µ–º –±–∞–∑—É, –Ω–æ –µ—â—ë –Ω—É–∂–Ω–æ –≤—Ä–µ–º—èüòè",
                              keyboard=main_keyboard)
                elif event.object.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                    write_msg(event.object.peer_id, "–û–∫, —Ç–æ–ª—å–∫–æ –≤—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µüññ", keyboard=schedules_keyboard)
                elif event.object.text.lower() == "–æ –±–æ—Ç–µ":
                    write_msg(event.object.peer_id, about_bot, keyboard=main_keyboard)
                    write_msg(event.object.peer_id,
                              "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—Å—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ —Å—Ç–µ–Ω–µ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –ø–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—åüòâ",
                              keyboard=main_keyboard, attachment="photo222338543_457245710_4c9cbdcfb8eba61348")
                # schedules keyboard
                elif event.object.text.lower() == "–∑–≤–æ–Ω–∫–æ–≤":
                    write_msg(event.object.peer_id, "–¢–∞–∫—Å, –∏ –µ—â—ë –≤—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤ü§î",
                              keyboard=select_call_class_keyboard)
                elif event.object.text.lower() == "—É—Ä–æ–∫–æ–≤":
                    write_msg(event.object.peer_id, "–•–º–º, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—åüòº", keyboard=choosing_day_of_week_keyboard)
                # select call class keyboard
                elif event.object.text.lower() == "8-9":
                    write_msg(event.object.peer_id, eight_nine_schedule_calls, keyboard=main_keyboard)
                elif event.object.text.lower() == "10-11":
                    write_msg(event.object.peer_id, ten_eleven_schedule_calls, keyboard=main_keyboard)
                # choosing day of week keyboard
                elif (event.object.text.lower() == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  f"–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –õ–æ–≤–∏ —Å–≤–æ–π VK-ID(id{event.object.peer_id}) –∏ –ø–∏—à–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É - —Ç–∞–º —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É‚úå",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif (event.object.text.lower() == "–≤—Ç–æ—Ä–Ω–∏–∫"):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  f"–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –õ–æ–≤–∏ —Å–≤–æ–π VK-ID(id{event.object.peer_id}) –∏ –ø–∏—à–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É - —Ç–∞–º —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É‚úå",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–í—Ç–æ—Ä–Ω–∏–∫", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif (event.object.text.lower() == "—Å—Ä–µ–¥–∞"):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  f"–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –õ–æ–≤–∏ —Å–≤–æ–π VK-ID(id{event.object.peer_id}) –∏ –ø–∏—à–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É - —Ç–∞–º —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É‚úå",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–°—Ä–µ–¥–∞", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif (event.object.text.lower() == "—á–µ—Ç–≤–µ—Ä–≥"):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  f"–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –õ–æ–≤–∏ —Å–≤–æ–π VK-ID(id{event.object.peer_id}) –∏ –ø–∏—à–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É - —Ç–∞–º —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É‚úå",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ß–µ—Ç–≤–µ—Ä–≥", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif (event.object.text.lower() == "–ø—è—Ç–Ω–∏—Ü–∞"):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  f"–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –õ–æ–≤–∏ —Å–≤–æ–π VK-ID(id{event.object.peer_id}) –∏ –ø–∏—à–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É - —Ç–∞–º —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É‚úå",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–ü—è—Ç–Ω–∏—Ü–∞", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                elif (event.object.text.lower() == "—Å—É–±–±–æ—Ç–∞"):
                    UserSearcher.searching_user_in_database(database_source="workWithUsersDatabase/UsersDatabase.txt",
                                                            user_id=f"id{event.object.peer_id}")
                    if UserSearcher.presence_user == []:
                        write_msg(event.object.peer_id,
                                  f"–¢–∞–∫—Å, —Ç–µ–±—è –∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ. –õ–æ–≤–∏ —Å–≤–æ–π VK-ID(id{event.object.peer_id}) –∏ –ø–∏—à–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–µ—Å–µ–¥—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É - —Ç–∞–º —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É‚úå",
                                  keyboard=main_keyboard)
                    else:
                        write_msg(event.object.peer_id, "–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–±—èüîé",
                                  keyboard=main_keyboard)
                        vk.method('messages.setActivity', {'peer_id': event.object.peer_id, 'type': 'typing'})
                        ExcelSearcher.selective_data_search(excel_source=UserSearcher.presence_user[2],
                                                            sheet_name=UserSearcher.presence_user[3],
                                                            columns=UserSearcher.presence_user[4],
                                                            extra_cells=UserSearcher.presence_user[5],
                                                            start_data="–°—É–±–±–æ—Ç–∞", end_data="None")
                        write_msg(event.object.peer_id, f"\n{ExcelSearcher.output_day_schedule}",
                                  keyboard=main_keyboard)
                # easter egg
                elif event.object.text.lower() == "–ø–∞—Å—Ö–∞–ª–∫–∞":
                    write_msg(event.object.peer_id,
                              "–ü–∞—Å—Ö–∞–ª–∫–∞?! –í–∞—É, –≤ –±–æ—Ç–µ –µ—Å—Ç—å –ø–∞—Å—Ö–∞–ª–∫–∞! –ü—Ä–∏—Å—Ç—É–ø–∏–º, –µ—Å—Ç—å —à–∏—Ñ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–∏–∫—á–µ –Ω–∏–∂–µ - —Ä–∞—Å—à–∏—Ñ—Ä—É–π –µ–≥–æ –∏ –æ—Ç–ø–∏—à–∏—Å—å –≤ –æ–±—â—É—é –±–µ—Å–µ–¥—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞(–ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ, –ø–æ—ç—Ç–æ–º—É –¥–∞—ë–º –¥–≤–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: ascii, tenet)",
                              keyboard=main_keyboard, attachment="photo222338543_457245709_c2475e60dc624529c3")
                # check for updates
                elif event.object.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è":
                    write_msg(event.object.peer_id,
                              "–û–æ–æ—É –¥–∞ - –∞ –≤–æ—Ç –∏ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ú—ã —Å–ª–∞–≤–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±–µ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—èüòé",
                              keyboard=main_keyboard)
                # get VK-ID
                elif event.object.text.lower() == "–ø–æ–ª—É—á–∏—Ç—å id":
                    write_msg(event.object.peer_id, f"–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID –≤ –í–ö: id{event.object.peer_id}",
                              keyboard=main_keyboard)
                # unrecognized command
                else:
                    write_msg(event.object.peer_id, "–≠—Ç–æ —Ç–æ—á–Ω–æ –∫–æ–º–∞–Ω–¥–∞:/", keyboard=main_keyboard)
                # sending data to the terminal
                print("-----------------------------")


# connect and reconnect when disconnected
if __name__ == "__main__":
    while True:
        try:
            bot_processing()
        except Exception as E:
            print("-----------------------------")
            print(datetime.datetime.today())
            print("!!!  The bot is disabled  !!!")
            print(f"Reason: {E}")
            print("-----------------------------")
            time.sleep(reboot_time)
            print("!!!    Reconnect, wait    !!!")

# Authors of the project:
# 1-MachnevEgor_https://vk.com/machnev_egor
# 2-SchalimovDmitriy_https://vk.com/astronaut_without_spaceship
# 3-ArsenyKarimov_https://vk.com/id222338543
# 4-MihailMarkov_https://vk.com/mixxxxail
# Contacts in email:
# 1-meb.official.com@gmail.com
# 2-dmitriy-shalimov@yandex.ru
# 3-arseny.karimov@gmail.com
# 4-mihailmarkov2004@gmail.com
